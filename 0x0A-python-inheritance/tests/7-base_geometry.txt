>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("pos", 45)
>>> bg.integer_validator("neg", -45)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 18, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: neg must be greater than 0
>>> bg.integer_validator("pos", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 18, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: pos must be greater than 0
>>> bg.integer_validator("pos", int('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: 'inf'
>>> bg.integer_validator("pos", 45, 67)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>> bg.integer_validator("pos", 459, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>> bg.integer_validator("pos", 't')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name));
TypeError: pos must be an integer
>>> bg.integer_validator("bri", "ty")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name));
TypeError: bri must be an integer
>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator(0, 12)
>>> bg.integer_validator(34, "ink")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: 34 must be an integer
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> bg. integer_validator("age", True)
>>> bg. integer_validator("age", {3, 4})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 16, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: age must be an integer
>>> integer_validator("age", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'integer_validator' is not defined
>>> bg.area(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: area() takes 1 positional argument but 2 were given
>>> bg.area("ha")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: area() takes 1 positional argument but 2 were given
